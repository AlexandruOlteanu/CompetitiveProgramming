Primes:
    To find first N primes you need to check up to 2N * log2(N)

BFS:
    You can actually calculate pretty fast minimum odd distance or even distance from
    a node to all other nodes with a dist[node][par]  where par = 0 or 1

GCD:

        1) In order to calculate how many pairs (x, y) have gcd(x, y) = k
        you can have the formula: 
            gcd(x, y, k) = how many pairs x, y have gcd = k
            cnt(x, y, k) = how many pairs x, y have the divizor k (not gcd) 
            
            Then:
            gcd(x, y, k) = cnt(x, y, k) - gcd(x, y, 2k) - gcd(x, y, 3k) - gcd(x, y, 4k) .... 

            So you can go backwards and calculate gcd(x, y, k) for all k from 1 to MAX with compelxity
            O(M * log2(M))

            For this you can also use mobius formula but it's not that flexible inbetween calculations


Bit Operations:
        // ==== Basic Bitwise Identities ====

        // XOR is associative and commutative
        a ^ b == b ^ a;
        (a ^ b) ^ c == a ^ (b ^ c);

        // AND is associative and commutative
        a & b == b & a;
        (a & b) & c == a & (b & c);

        // OR is associative and commutative
        a | b == b | a;
        (a | b) | c == a | (b | c);

        // Idempotent Laws
        a & a == a;
        a | a == a;
        a ^ a == 0;

        // Neutral Elements
        a & 0 == 0;
        a | 0 == a;
        a ^ 0 == a;

        // XOR with -1 gives bitwise NOT
        ~a == a ^ -1;

        // XOR Swap (no temp variable)
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;

        // ==== Arithmetic Relations ====

        // Addition using XOR and AND
        a + b == (a ^ b) + 2 * (a & b);

        // Subtraction (similar structure)
        a - b == (a ^ b) - 2 * ((~a) & b);

        // XOR in terms of addition and AND
        a ^ b == (a + b) - 2 * (a & b);

        // ==== Bit Manipulation Tricks ====

        // Get lowest set bit
        int lowestBit = x & -x;

        // Clear lowest set bit
        x = x & (x - 1);

        // Set lowest 0-bit to 1
        x = x | (x + 1);

        // Check if power of 2
        bool isPowerOf2 = x != 0 && (x & (x - 1)) == 0;

        // Count set bits (builtin)
        int count = __builtin_popcount(x);

        // ==== Distributive Laws ====
        // (true only for AND/OR)
        a & (b | c) == (a & b) | (a & c);
        a | (b & c) == (a | b) & (a | c);

        // ❌ XOR is NOT distributive over AND or OR
        // a ^ (b & c) != (a ^ b) & (a ^ c)
        // a ^ (b | c) != (a ^ b) | (a ^ c)

        // ==== Parity with XOR ====
        // XOR of multiple values gives parity
        // If result == 0 => even # of 1s
        // If result == 1 => odd # of 1s
        int parity = a ^ b ^ c ^ d; // etc.

        // ==== Useful for Debugging / Practice ====
        // Bit length (position of highest 1-bit)
        int length = 32 - __builtin_clz(x);

        // Trailing zeros (lowest set bit index)
        int lowbitIndex = __builtin_ctz(x);

        // Toggle i-th bit
        x ^= (1 << i);

        // Set i-th bit
        x |= (1 << i);

        // Clear i-th bit
        x &= ~(1 << i);

        // Check i-th bit
        bool isSet = x & (1 << i);
